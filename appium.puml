@startuml
'title appium

'skinparam monochrome true
'skinparam classBackgroundColor White
skinparam classArrowColor Black
skinparam classBorderColor Black
skinparam stereotypeCBackgroundColor Gray
'hide members
hide circle

class Appium {
  attachTo (rest)
  attachSocket (webSocket)
  registerConfig (configObj)
  deviceIsRegistered (deviceType)
  preLaunch (callback)
  setArgFromCap (arg, cap)
  updateResetArgsFromCaps ()
  start (desiredCaps, callback)
  getDeviceType (args, caps)
  isSelendroidAutomation (automation)
  isChromeBrowser (browser)
  isChromePackage (pkg)
  isSafariBrowser (browser)
  getDeviceTypeFromPlatform (caps)
  configure (args, desiredCaps, cb)
  invoke (cb)
  getNewDevice (deviceType)
  timeoutWaitingForCommand ()
  cleanupSession (err, cb)
  resetTimeout ()
  setCommandTimeout (secs, cb)
  stop (cb)
  reset (cb)
}

class Device {
  init ()
  configure (args, caps)
  setArgFromCap (arg, cap)
  appString () : string
  configureApp (cb)
  configureLocalApp (cb)
  appIsPackageOrBundle (app)
  configureDownloadedApp (app)
  unzipLocalApp (localZipPath, cb)
  unzipApp (zipPath, cb)
  downloadAndUnzipApp (appUrl, cb)
  getSetting (str)
}

class Android {
  init ()
  noLaunchSetup (cb)
  start (cb, onDie)
  initUiautomator (cb)
  onLaunch (err)
  restartUiautomator (cb)
  wrapActionAndHandleADBDisconnect (action, ocb)
  onUiautomatorExit ()
  checkShouldRelaunch (launchErr)
  checkApiLevel (cb)
  decorateChromeOptions (caps)
  processFromManifest (cb)
  pushStrings (cb, language)
  getStrings (language, stringFile, cb)
  pushAppium (cb)
  startAppUnderTest (cb)
  startApp (args, cb)
  stop (cb)
  cleanup ()
  shutdown (cb)
  proxy (command, cb) = deviceCommon.proxy
  respond (response, cb) = deviceCommon.respond
  initQueue ()
  push (elem)
  wakeUp (cb)
  getDataDir (cb)
  setupCompressedLayoutHierarchy (cb)
  setCompressedLayoutHierarchy (compress, cb)
  waitForActivityToStop (cb)
  resetTimeout () = deviceCommon.resetTimeout;
  waitForCondition (waitMs, condFn, cb, intervalMs) = deviceCommon.waitForCondition;
  implicitWaitForCondition = deviceCommon.implicitWaitForCondition;
  getSettings (cb) = deviceCommon.getSettings;
  updateSettings (newSettings, cb) = deviceCommon.updateSettings;
}

Device <|-- Android
Device <|-- Firefox
Device <|-- IOS

Android -u-|> androidController
Android -u-|> androidContextController
Android -u-|> androidCommon
Android -u-|> androidHybrid
Android --> ADB
Android --> UiAutomator

class androidController {
  pressKeyCode (keycode, metastate, cb)
  longPressKeyCode (keycode, metastate, cb)
  keyevent (keycode, metastate, cb)
  findElement (strategy, selector, cb)
  findElements (strategy, selector, cb)
  findUIElementOrElements (strategy, selector, many, context, cb)
  handleFindCb (err, res, many, findCb)
  findElementFromElement (element, strategy, selector, cb)
  findElementsFromElement (element, strategy, selector, cb)
  setValueImmediate (elementId, value, cb)
  setValue (elementId, value, cb)
  replaceValue (elementId, value, cb)
  click (elementId, cb)
  touchLongClick (elementId, x, y, duration, cb)
  touchDown (elementId, x, y, cb)
  touchUp (elementId, x, y, cb)
  touchMove (elementId, x, y, cb)
  complexTap (tapCount, touchCount, duration, x, y, elementId, cb)
  clear (elementId, cb)
  submit (elementId, cb)
  getName (elementId, cb)
  getText (elementId, cb)
  getAttribute (elementId, attributeName, cb)
  getLocation (elementId, cb)
  getSize (elementId, cb)
  getWindowSize (windowHandle, cb)
  back (cb)
  forward (cb)
  refresh (cb)
  getPageIndex (elementId, cb)
  keys (elementId, keys, cb)
  frame (frame, cb)
  implicitWait (ms, cb)
  asyncScriptTimeout (ms, cb)
  executeAsync (script, args, responseUrl, cb)
  elementDisplayed (elementId, cb)
  elementEnabled (elementId, cb)
  elementSelected (elementId, cb)
  getCssProperty (elementId, propertyName, cb)
  getPageSource (cb)
  getAlertText (cb)
  setAlertText (text, cb)
  postAcceptAlert (cb)
  postDismissAlert (cb)
  lock (secs, cb)
  isLocked (cb)
  pushUnlock (cb)
  unlock (cb)
  equalsWebElement (cb)
  getOrientation (cb)
  setOrientation (orientation, cb)
  endCoverage (intentToBroadcast, ecOnDevicePath, cb)
  pullFile (remotePath, cb)
  pushFile (base64Data, remotePath, cb)
  pullFolder (remotePath, cb)
  getScreenshot (cb)
  fakeFlick (xSpeed, ySpeed, swipe, cb)
  fakeFlickElement (elementId, xoffset, yoffset, speed, cb)
  swipe (startX, startY, endX, endY, duration, touchCount, elId, cb)
  rotate (x, y, radius, rotation, duration, touchCount, elId, cb)
  pinchClose (startX, startY, endX, endY, duration, percent, steps, elId, cb)
  pinchOpen (startX, startY, endX, endY, duration, percent, steps, elId, cb)
  flick (startX, startY, endX, endY, touchCount, elId, cb)
  drag (startX, startY, endX, endY, duration, touchCount, elementId, destElId, cb)
  scrollTo (elementId, text, direction, cb)
  scroll (direction, cb)
  shake (cb)
  setLocation (latitude, longitude, altitude, horizontalAccuracy, verticalAccuracy, course, speed, cb)
  url (url, cb)
  active (cb)
  closeWindow (cb)
  clearWebView (cb)
  execute (script, args, cb)
  title (cb)
  moveTo (element, xoffset, yoffset, cb)
  clickCurrent (button, cb)
  getCookies (cb)
  setCookie (cookie, cb)
  deleteCookie (cookie, cb)
  deleteCookies (cb)
  resetAndStartApp (cb)
  isAppInstalled (appPackage, cb)
  removeApp (appPackage, cb)
  installApp (appPath, cb)
  unpackApp (req, cb)
  tap (elementId, x, y, count, cb)
  doTouchAction (action, opts, cb)
  performTouch (gestures, cb)
  parseTouch (gestures, cb)
  performMultiAction (elementId, actions, cb)
  openNotifications (cb)
}

class androidContextController {
  defaultContext ()
  leaveWebView (cb)
  getCurrentContext (cb)
  getContexts (cb)
  isChromedriverContext (viewName)
  setContext (name, cb)
  isWebContext ()
  getWindowHandle (cb)
  getWindowHandles (cb)
  setWindow (name, cb)
}

class androidCommon {
  configure (args, caps, cb)
  configureApp (cb)
  setAndroidArgs ()
  background (secs, cb)
  openSettingsActivity (setting, cb)
  toggleSetting (setting, preKeySeq, ocb)
  toggleData (cb)
  toggleFlightMode (ocb)
  toggleWiFi (cb)
  toggleLocationServices (ocb)
  prepareDevice (onReady)
  checkAppPresent (cb)
  prepareEmulator (cb)
  ensureDeviceLocale (cb)
  prepareActiveDevice (cb)
  resetApp (cb)
  getRemoteApk (cb)
  remoteApkExists (cb)
  uninstallApp (cb)
  installAppForTest (cb)
  installRemoteWithRetry (remoteApk, cb)
  getAppMd5 (cb)
  remoteTempPath ()
  removeTempApks (exceptMd5s, cb)
  forwardPort (cb)
  pushUnicodeIME (cb)
  pushSettingsApp (cb)
  packageAndLaunchActivityFromManifest (cb)
  getLog (logType, cb)
  getLogTypes (cb)
  getCurrentActivity (cb)
  getDeviceProperty (property, cb)
  getDeviceLanguage (cb)
  getDeviceCountry (cb)
  extractLocalizedStrings (language, outputPath, cb)
  extractStringsFromApk (makeStrings, language, cb)
  extractStrings (cb, language)
  initUnicode (cb)
  getNetworkConnection (cb)
  setNetworkConnection (type, ocb)
  isIMEActivated (cb)
  availableIMEEngines (cb)
  getActiveIMEEngine (cb)
  activateIMEEngine (imeId, cb)
  deactivateIMEEngine (cb)
  hideKeyboard ()
  getJavaVersion (cb)
  initJavaVersion (cb)
  initAdb (cb)
}

class androidHybrid {
  listWebviews (cb)
  rememberProxyState ()
  restoreProxyState ()
  getProcessNameFromWebview (webview, cb)
  startChromedriverProxy (context, cb)
  onChromedriverExit ()
  cleanupChromedriver (chromedriver, cb)
  suspendChromedriverProxy (cb)
  stopChromedriverProxies (ocb)
  defaultWebviewName ()
  initAutoWebview (cb)
}

class UiAutomator {
  start (readyCb)
  setExitHandler (onExit)
  exitHandler (code)
  checkForSocketReady (output)
  sendAction (action, params, cb)
  sendCommand (type, extra, cb)
  shutdown (cb)
  outputStreamHandler (output)
  handleBootstrapOutput (output)
  errorStreamHandler (output)
  debug (msg)
}

@enduml